
#include "../basic/basic_return_values.h"

namespace concepts {

	/**
	 * @ingroup block_memory_concept
	 * @ingroup extiface_concept
	 * @ingroup concepts
	 */
	class BlockMemory_concept
		: public BasicReturnValues_concept {
			
		public:
			typedef ... self_type;
			typedef ... self_pointer_t;

			typedef ... block_data_t;

			typedef ... address_t;

			enum {
				BLOCK_SIZE = 512, ///< size of block in byte (usable payload)
				BUFFER_SIZE = 512, ///< size of buffers to pass to methods. Might be larger than BLOCK_SIZE for some implementations
			};
			
			enum {
				NO_ADDRESS = (address_t)(-1) ///< address_t value denoting an invalid address
			};

			/**
			 * Re-initialize/reset the memory interface.
			 * This should not influence the data stored on the memory but
			 * rather only reset the interface (e.g. clear caches etc...)
			 *
			 * @return SUCCESS or ERR_UNSPEC
			 */
			int init();

			/**
			 * @return The number of blocks this block device allows access
			 * to.
			 * That is, addresses in the range [0, ..., size() - 1] should be
			 * considered valid.
			 */
			address_t size();

			/**
			 * Wipe the block memory, that is erase all data.
			 * @return SUCCESS or ERR_UNSPEC
			 */
			int wipe();
			
			/**
			 * @return SUCCESS iff the block was read successfully
			 */
			int read(block_data_t* buffer, address_t addr);
			
			/**
			 * @return SUCCESS iff the block was written successfully
			 */
			int write(block_data_t* buffer, address_t addr);
	}


} // namespace

// vim: set ft=cpp:
