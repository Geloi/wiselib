namespace concepts {

	/**
	 * \brief Basic concept for file systems
     *
     * @ingroup file_system_concept
	 * @ingroup block_memory_concept
	 * @ingroup concepts
	 */
	class FileSystem_concept
		: public BlockMemory_concept {

		public:
            typedef OsModel_P OsModel;
            typedef BlockMemory_P BlockMemory;
            typedef Debug_P Debug;

            typedef ... block_data_t;
			typedef ... address_t;

            enum {
                SUCCESS = OsModel::SUCCESS,
                ERR_IO = OsModel::ERR_IO,
                ERR_NOMEM = OsModel::ERR_NOMEM,
                ERR_UNSPEC = OsModel::ERR_UNSPEC
            };

            /**
              * Results of Disk Functions
              */
            enum d_result_t {
                RES_OK = 0,				/**< 0: Function succeeded */
                RES_ERROR,			    /**< 1: Disk error */
                RES_NOTRDY,				/**< 2: Not ready */
                RES_PARERR		    	/**< 3: Invalid parameter */
            };

            /**
		     * File function return code (f_result_t)
		     */
		    enum f_result_t {
		        FR_OK = 0,				/**< (0) Succeeded */
		        FR_DISK_ERR,			/**< (1) A hard error occurred in the low level disk I/O layer */
		        FR_INT_ERR,				/**< (2) Assertion failed */
		        FR_NOT_READY,			/**< (3) The physical drive cannot work */
		        FR_NO_FILE,				/**< (4) Could not find the file */
		        FR_NO_PATH,				/**< (5) Could not find the path */
		        FR_INVALID_NAME,		/**< (6) The path name format is invalid */
		        FR_DENIED,				/**< (7) Access denied due to prohibited access or directory full */
		        FR_EXIST,				/**< (8) Access denied due to prohibited access */
		        FR_INVALID_OBJECT,		/**< (9) The file/directory object is invalid */
		        FR_WRITE_PROTECTED,		/**< (10) The physical drive is write protected */
		        FR_INVALID_DRIVE,		/**< (11) The logical drive number is invalid */
		        FR_NOT_ENABLED,			/**< (12) The volume has no work area */
		        FR_NO_FILESYSTEM,		/**< (13) There is no valid FAT volume */
		        FR_MKFS_ABORTED,		/**< (14) The f_mkfs() aborted due to any parameter error */
		        FR_TIMEOUT,				/**< (15) Could not get a grant to access the volume within defined period */
		        FR_LOCKED,				/**< (16) The operation is rejected according to the file sharing policy */
		        FR_NOT_ENOUGH_CORE,		/**< (17) LFN working buffer could not be allocated */
		        FR_TOO_MANY_OPEN_FILES,	/**< (18) Number of open files > _FS_SHARE */
		        FR_INVALID_PARAMETER,	/**< (19) Given parameter is invalid */
		        FR_NOT_OPENED   		/**< (20) File is not opened */
		    };

            int init(Debug& debug, BlockMemory& block_memory);

            /**
              * Mount/Unmount a Locical Drive
              */
            f_result_t mount ();

            /**
              * Open or Create a File
              */
            f_result_t open (
                const char* path	    /**< Pointer to the file name */
            );

            /**
              * Read File
              */
            f_result_t read (
                void* buff,		        /**< Pointer to the read buffer (NULL:Forward data to the stream)*/
                ::uint16_t btr,	    	/**< Number of bytes to read */
                ::uint16_t* br		    /**< Pointer to number of bytes read */
            );

            /**
              * Write File
              */
            f_result_t write (
                void* buff,	            /**< Pointer to the data to be written */
                ::uint16_t btw,			/**< Number of bytes to write (0:Finalize the current write operation) */
                ::uint16_t* bw			/**< Pointer to number of bytes written */
            );

            /**
              * Seek File R/W Pointer
              */
            f_result_t lseek (
                address_t ofs		    /**< File pointer from top of file */
            );
            
            /**
              * Delete a file
              */
            f_result_t erase (
	        	const TCHAR* path		/**< Pointer to the file or directory path */
		    );
		    
		    /**
			 * Create a Directory
			 */
			f_result_t mkdir (
				const TCHAR* path		/**< Pointer to the directory path */
			);
			
			/**
		     * Create File System on the Drive
		     */
		    f_result_t mkfs (
		        block_data_t sfd,			/**< Partitioning rule 0:FDISK, 1:SFD */
		        unsigned int au				/**< Allocation unit [bytes] */
		    );

} // namespace
