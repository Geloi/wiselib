
namespace concepts {

/**
 * Concept for all tuple types that can be managed by the tuple
 * store.
 * 
 * A tuple is a container for a fixed (small) number of elements.
 * Each of the elements will be either variable-length data represented by a
 * block_data_t* and a length value OR a dictionary key that fits into a
 * ::uint32_t.
 * It can be assumed that the user of the Tuple knows at which indices he
 * currently stores keys and at which data, so the tuple implementation does
 * not need to hold type information.
 * 
 * Note: It is necessary to have distinct methods for key- vs. value access as
 * sizeof(block_data_t*) may be unequal to sizeof(::uint32_t)
 */
class Tuple_concept {
	public:
		typedef ... block_data_t;
		typedef ... size_type;
		typedef ... self_type;
		
		enum {
			SIZE = ...
		};
		
		/**
		 * Deeply free any data in the given column.
		 * The implementation should make sure that consequitive calls
		 * to free_deep(i) for the same value of i are possible.
		 */
		void free_deep(size_type col);
		
		/**
		 * Free all deeply referenced data of the tuple, usually equivalent to
		 * calling free_deep() for all possible columns.
		 */
		void destruct_deep();
		
		///@name Data Access
		///@{
		
		/**
		 * Return pointer to data at i'th column.
		 */
		block_data_t* get(size_type i);
		
		/**
		 * Return length of data (in bytes) of data returned by get(i).
		 */
		size_type length(size_type i);
		
		/**
		 * Set data at column i to the data pointed to by "data".
		 * The tuple implementation is free to make either a free or shallow
		 * copy of the data, however it can not rely on free_deep() being
		 * called for columns set with set().
		 */
		void set(size_type i, block_data_t* data);
		
		/**
		 * Same as set() but the tuple implementation is obliged to make deep
		 * copy, i.e. the caller is allowed to free "data" after the call and
		 * is responsible for calling free_deep(i) for freeing the deep copy.
		 */
		void set_deep(size_type i, block_data_t* data);
		
		///@}
		
		///@name Dictionary Key Access
		///@{
		
		/**
		 * Return i'th column as dictionary key.
		 */
		::uint32_t get_key(size_type i);
		
		/**
		 * Set value in i'th column as dictionary key.
		 */
		void set_key(size_type i, ::uint32_t);
		
		///@}
		
		/**
		 * For compatibility with STL containers
		 */
		bool operator<(const self_t& other) const;
};

} // namespace

// vim: set ft=cpp:
